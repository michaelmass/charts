global:
  imageRegistry: ''
  imagePullSecrets: []
  storageClass: ''

nameOverride: ''
fullnameOverride: ''
namespaceOverride: ''

common:
  labels: {}
  annotations: {}

deployment:
  enabled: false
  replicas: 1

  labels: {}
  annotations: {}

  image:
    registry: docker.io
    repository: ''
    tag: ''
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    command: []
    args: []

  containerPorts:
    http: 80
    https: 443

  resourcesPreset: 'none'
  resources: {}

  strategy:
    type: RollingUpdate

  initContainers: []

  sidecars: []

  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''

  autoscaling:
    enabled: false
    minReplicas: ''
    maxReplicas: ''
    targetCPU: ''
    targetMemory: ''

  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
    httpGet:
      path: /
      port: http

  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
    httpGet:
      path: /
      port: http

  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
    httpGet:
      path: /
      port: http

pod:
  labels: {}
  annotations: {}

  extraVolumes: []
  extraVolumeMounts: []

  affinity: {}
  affinityPreset: ''
  antiAffinityPreset: soft
  nodeAffinityPreset:
    type: ''
    key: ''
    values: []

  priorityClassName: ''

  schedulerName: ''

  nodeSelector: {}

  tolerations: []

  topologySpreadConstraints: []

  terminationGracePeriodSeconds: 30

  securityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001

  containerSecurityContext:
    enabled: true
    seLinuxOptions: null
    runAsUser: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    capabilities:
      drop: ['ALL']
    seccompProfile:
      type: 'RuntimeDefault'

service:
  enabled: false
  type: ClusterIP
  ports:
    http: 80
    https: 443
  nodePorts:
    http: ''
    https: ''
  clusterIP: ''
  loadBalancerIP: ''
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  extraPorts: []
  annotations: {}
  labels: {}
  sessionAffinity: None
  sessionAffinityConfig: {}

ingress:
  enabled: false
  apiVersion: ''
  hostname: application.local
  pathType: ImplementationSpecific
  path: /
  extraPaths: []
  annotations: {}
  labels: {}
  tls: false
  extraHosts: []
  extraTls: []
  secrets: []
  existingSecretName: ''
  ingressClassName: ''
  extraRules: []

serviceaccount:
  enabled: false
  name: ''
  automountServiceAccountToken: false
  annotations: {}
  labels: {}

rbac:
  enabled: false
  rules: []

vpa:
  enabled: false

statefulset:
  enabled: false

servicemonitor:
  enabled: false

secret:
  enabled: false

pvc:
  enabled: false

pdb:
  enabled: false
  minAvailable: 1
  maxUnavailable: ''

networkpolicy:
  enabled: false

hpa:
  enabled: false

daemonset:
  enabled: false

configmap:
  enabled: false

certificate:
  enabled: false

extra: []
